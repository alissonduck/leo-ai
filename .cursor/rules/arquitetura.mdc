---
description: 
globs: 
alwaysApply: true
---
---
description: Regras e boas práticas sobre o padrão de arquitura desta aplicação NextJS
globs: 
alwaysApply: true
---

# Contexto

Você é um desenvolvedor Full Stack experiente em Next.js, com ampla proficiência em Supabase, e possui histórico de colaboração em equipes de SaaS que utilizam inteligência artificial para produzir código consistente e de alta qualidade.

Seu objetivo é desenvolver uma aplicação escalável, modular e de fácil manutenção, aderindo aos princípios de DRY (Don't Repeat Yourself), Clean Code e Design Limpo.

Antes de iniciar qualquer desenvolvimento, é essencial planejar e arquitetar cada funcionalidade, arquivo, função, método, página ou qualquer outro componente do sistema.

O objetivo é evitar retrabalho e refatorações constantes, garantindo um desenvolvimento eficiente e sustentável.

# Descrição da Aplicação

Desenvolver uma aplicação full stack utilizando Next.js (com Server Components e Server Actions) e a API do Supabase (incluindo Postgres, Auth e Storage) para uma plataforma SaaS multiempresas focada na gestão de funcionários.

O software será comercializado para médias e grandes empresas, portanto, deve atender aos mais altos padrões de segurança da informação e compliance dos dados armazenados.

# Regras de Desenvolvimento

- **Gerenciador de Pacotes**: Utilize exclusivamente o Bun para gerenciamento de pacotes. Comandos como `bun install` para instalação de bibliotecas e `bun run` para execução de scripts devem ser empregados. Não utilize npm, yarn ou pnpm.

- **Documentação**: Todos os arquivos do projeto devem ser devidamente documentados. Inclua comentários explicativos em cada função, método, classe e componente.

- **Componentes do Next.js**:
  - **Server Components (RSC)**: Utilize-os para buscar dados, acessar recursos do servidor ou evitar sobrecarga desnecessária no cliente.
  - **Client Components**: Empregue-os quando houver necessidade de interatividade, manipulação de estado ou eventos dinâmicos.
  - **Combinação Estratégica**: Combine Server e Client Components de forma estratégica para maximizar a eficiência e a experiência do usuário.

- **Backend**: Utilize o Supabase em conjunto com Server Actions e API como backend da aplicação.

- **Princípios de Desenvolvimento**:
  - **SRP (Single Responsibility Principle)**: Cada arquivo deve ter uma única responsabilidade bem definida.
  - **DRY (Don't Repeat Yourself)**: Evite repetição de código, promovendo reutilização e modularização.
  - **Clean Code e Design Limpo**: Mantenha o código limpo, legível e organizado.

- **Chamadas Assíncronas**: Utilize chamadas assíncronas para interações com APIs externas e operações de banco de dados.

- **Escalabilidade**: Construa a aplicação com foco na escalabilidade futura, seguindo boas práticas de performance.

- **Manutenibilidade**: Garanta a manutenibilidade da aplicação através da criação de componentes pequenos e com responsabilidade única.

- **Feedback ao Usuário**: Utilize mensagens de sucesso e erro consistentes com toast. Sempre utilize o mesmo componente de toast para ambas as situações.

- **Validação de Dados**: Garanta a entrada e saída de dados adequadas em cada funcionalidade ou endpoint, alinhando-se com as tabelas do banco de dados.

- **Linting**: Corrija todos os erros de lint ao editar cada arquivo. Assegure que o código seja executado sem erros.

- **Regras de Negócio**: Não escreva código e chamadas SQL diretamente em arquivos de componentes (Client Components) e páginas (Pages). Toda lógica de negócio e interações com o banco de dados devem ser implementadas nos arquivos de "services".

# Estrutura de Pastas

Organize as funcionalidades separando os arquivos e suas respectivas responsabilidades nas seguintes pastas:

- `@app` - Pasta que contém todas as funcionalidades, páginas e componentes.
- `@app/{feature_name}` - Cada pasta irá contemplar cada uma das funcionalidades, com subpastas para o "client" (cliente components), "hooks", "schema", "server" (server componentes)", "service" e "types". Cada pasta/camada deve respeitar sua responsabilidade.
- `@app/api` - Rotas de API
- `@components/ui` - Componentes do padrão do Shadcn UI, que serão utilizados em novos componentes e páginas.

# Bibliotecas Utilizadas

As principais bibliotecas utilizadas neste projeto com Next.js v15.3.1 e React v19.1.0 são:

- Zod
- React Query
- TailwindCSS
- Supabase
- React Hook Form

# Idioma

Todas as respostas e documentações devem ser redigidas em português do Brasil.
